#version 410
precision highp float;

// light property
uniform vec4 mtlAmbientColor;
uniform vec4 mtlDiffuseColor;
uniform vec4 mtlSpecularColor;
uniform float mtlSpecularExponent;

in float df;
in float sf;
in float distance_factor;
in vec2 text_coord;

// for texture
uniform sampler2D gl3d_texture_ambient;
uniform sampler2D gl3d_texture_diffuse;
uniform sampler2D gl3d_texture_specular;

uniform bool gl3d_t_ambient_enable;
uniform bool gl3d_t_diffuse_enable;
uniform bool gl3d_t_specular_enable;

// light
uniform float shininess;
uniform float param_x;

out vec4 out_color;

void main() {
#if 1 // for test
    out_color = gl3d_t_ambient_enable ? texture(gl3d_texture_ambient, text_coord) :
    mtlAmbientColor;
    out_color += gl3d_t_diffuse_enable ? (0.0 + shininess) * texture(gl3d_texture_diffuse, text_coord) : 
    mtlDiffuseColor * (0.0 + shininess);
    out_color += gl3d_t_specular_enable ? sf * texture(gl3d_texture_specular, text_coord) : 
    mtlSpecularColor * sf;
    // for picking
    out_color = out_color/param_x;
    out_color.w = 1.0;
    // + texture(gl3d_texture_diffuse, text_coord);
#endif
    
    // texture(gl3d_texture_ambient, text_coord)
    // texture(gl3d_texture_diffuse, text_coord)
    // texture(gl3d_texture_specular, text_coord)
    // mtlAmbientColor
    // mtlDiffuseColor
    // mtlSpecularColor
    // out_color.w = 1.0;
}
