#version 410
precision highp float;
precision highp int;

in vec3 vertex_pos;
in vec3 vertex_normal;
in vec4 vertex_color;
in vec2 vertex_tex_coord;
in float vertex_tex_id;

out vec4 color;

// mvp matrix
uniform mat4 translationMatrix;
uniform mat4 viewingMatrix;
uniform mat4 pvmMatrix;
uniform mat3 normalMtx;

// light
uniform vec3 light_vector;
uniform vec3 eye_pos;
out vec3 eye_to_pos;
out vec3 l_normal;
out vec3 in_light;

out float df;
out float sf;
out float cam_pos_distance;
out vec2 text_coord;

// shadow
out vec4 vPos;

void main() {
    vPos = vec4(vertex_pos, 1.0);
#if 1
    // normalize light direction
    vec3 Lig = normalize(-light_vector);
    in_light = light_vector;
    eye_to_pos = vec3(translationMatrix * vec4(vertex_pos, 1.0)) - eye_pos;
    text_coord = vertex_tex_coord;
    // vec3 Lig = vec3(-normalize(viewingMatrix * translationMatrix * vec4(light_vector, 1.0)));
    vec3 Nor = normalMtx * vertex_normal;
    vec3 E = vec3(0, 1, 0);
    vec3 H = normalize(Lig + E);
    // 计算顶点到摄像机的距离
    cam_pos_distance = length(eye_pos - vec3(translationMatrix * vec4(vertex_pos, 1.0)));
    l_normal = Nor;

    df = max(0.0, dot(Nor, Lig));
    sf = max(0.0, dot(Nor, H));
#endif
    gl_Position = pvmMatrix * vec4(vertex_pos, 1.0);
}
