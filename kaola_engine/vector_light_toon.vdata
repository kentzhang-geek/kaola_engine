#version 100
precision highp float;
precision highp int;

attribute vec3 vertex_pos;
attribute vec3 vertex_normal;
attribute vec4 vertex_color;
attribute vec2 vertex_tex_coord;
attribute float vertex_tex_id;

varying vec4 color;

// mvp matrix
uniform mat4 translationMatrix;
uniform mat4 viewingMatrix;
uniform mat4 pvmMatrix;
uniform mat3 normalMtx;

// light
uniform vec3 light_vector;
uniform vec3 eye_pos;
uniform float shininess;

varying float df;
varying float sf;
varying float distance_factor;

void main() {
#if 1
    // normalize light direction
    vec3 Lig = normalize(-light_vector);
    // vec3 Lig = vec3(-normalize(viewingMatrix * translationMatrix * vec4(light_vector, 1.0)));
    vec3 Nor = normalMtx * vertex_normal;
    vec3 E = vec3(0, 0, 1);
    vec3 H = normalize(Lig + E);
    distance_factor = 1.0 / length(eye_pos - vertex_pos);
    
    df = max(0.0, dot(Nor, Lig));
    
    if (df < 0.1)
        df = 0.0;
    else if (df < 0.2)
        df = 0.2;
    else if (df < 0.4)
        df = 0.4;
    else if (df < 0.6)
        df = 0.6;
    else if (df < 0.8)
        df = 0.8;
    else
        df = 1.0;

    float tsf = max(0.0, dot(Nor, H));
    sf = pow(tsf, shininess);
    
#endif
    
#if 0
    // calculate real normal
    vec4 tmp = vec4((translationMatrix) * vec4(vertex_normal, 1.0));
    normal = normalize(vec3(tmp.x, tmp.y, tmp.z));
    point_pos = vec3(translationMatrix * vec4(vertex_pos, 1.0));
#endif
    
    // gl_Position = vec4(vertex_pos, 1.0);  // TEST positions
    gl_Position = pvmMatrix * vec4(vertex_pos, 1.0);
}
