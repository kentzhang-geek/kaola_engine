#version 100
precision highp float;

// light property
uniform vec4 mtlAmbientColor;
uniform vec4 mtlDiffuseColor;
uniform vec4 mtlSpecularColor;
uniform float mtlSpecularExponent;

varying float df;
varying float sf;
varying float distance_factor;
varying vec2 text_coord;

// for texture
uniform sampler2D gl3d_texture_ambient;
uniform sampler2D gl3d_texture_diffuse;
uniform sampler2D gl3d_texture_specular;

uniform bool gl3d_t_ambient_enable;
uniform bool gl3d_t_diffuse_enable;
uniform bool gl3d_t_specular_enable;

// light
uniform float shininess;
uniform float param_x;

void main() {
#if 1 // for test
	gl_FragColor = texture2D(gl3d_texture_ambient, text_coord) + mtlAmbientColor;
	gl_FragColor += (0.3 + 0.7 * df) * (texture2D(gl3d_texture_diffuse, text_coord) + mtlDiffuseColor);
	gl_FragColor += sf * (texture2D(gl3d_texture_specular, text_coord) + mtlSpecularColor);
    // for picking
	gl_FragColor = gl_FragColor/param_x;
    gl_FragColor = clamp(gl_FragColor, 0.0, 1.0);
    gl_FragColor.w = 1.0;
	// + texture2D(gl3d_texture_diffuse, text_coord);
#endif
    
    // gl_FragColor = texture2D(gl3d_texture_diffuse, text_coord);
    // 0.7 * clamp((texture2D(gl3d_texture_diffuse, text_coord) + mtlDiffuseColor), 0.0, 1.0) - 0.1;
    // gl_FragColor = clamp(gl_FragColor, 0.0, 1.0);
    // gl_FragColor.w = 1.0;
    // texture2D(gl3d_texture_diffuse, text_coord)  +
    // texture2D(gl3d_texture_specular, text_coord) +
    // mtlAmbientColor +
    // mtlDiffuseColor +
    // mtlSpecularColor;
    // for picking

    // texture2D(gl3d_texture_ambient, text_coord)
    // texture2D(gl3d_texture_diffuse, text_coord)
    // texture2D(gl3d_texture_specular, text_coord)
    // mtlAmbientColor
    // mtlDiffuseColor
    // mtlSpecularColor
    // gl_FragColor.w = 1.0;
}
