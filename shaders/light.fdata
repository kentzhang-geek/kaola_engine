#version 330 core
precision highp float;
#define MAX_MODEL_PER_DRAW 200

// light property
uniform vec4 mtlAmbientColor;
uniform vec4 mtlDiffuseColor;
uniform vec4 mtlSpecularColor;
uniform float mtlSpecularExponent;

in vec2 text_coord;

// for texture
uniform sampler2D colorText;
uniform sampler2D posText;
uniform sampler2D normalText;
uniform vec3 light[MAX_MODEL_PER_DRAW];
uniform int lightNum;

// for selection
in float downParam;

// reflection
uniform float alpha;

// out color
out vec4 oColor;

// gbuffer
//in vec3 lightPos;

void main() {
    // 获取颜色
    const float visionDepth = 5.0;
    vec4 color = texture2D(colorText, text_coord) * 2;
    vec3 pos = vec3(texture2D(posText, text_coord)).rgb;
    vec3 normal = vec3(texture2D(normalText, text_coord)).rgb;
//    vec4 color = vec4(normal, 1.0);

    float factor = 0.0f;
    for (int i = 0; i < MAX_MODEL_PER_DRAW; i++) {
        if (i > lightNum)
            break;
        float lightDis = length(light[i] - pos);
        float decay;
    if (lightDis > visionDepth)
        decay = 0.0f;
    else
        decay = 1.0 - lightDis /visionDepth;
        factor = factor + decay;
    }
    oColor = color * clamp(factor, 0.0, 1.0);
//    oColor = oColor / 200.0;
//    oColor = color;
    oColor.w = factor;
}
