#version 330 core
precision highp float;

// light property
uniform vec4 mtlAmbientColor;
uniform vec4 mtlDiffuseColor;
uniform vec4 mtlSpecularColor;
uniform float mtlSpecularExponent;

in vec2 text_coord;

// for texture
uniform sampler2D gl3d_texture_ambient;
uniform sampler2D gl3d_texture_diffuse;
uniform sampler2D gl3d_texture_specular;

// for selection
in float downParam;

// reflection
uniform float alpha;

// out color
out vec4 out_color;

void main() {
    // 计算自然色
    vec4 ambclr = texture2D(gl3d_texture_ambient, text_coord) + mtlAmbientColor;
    out_color = ambclr;

    // 计算散射色
    vec4 difclr = (texture2D(gl3d_texture_diffuse, text_coord) + mtlDiffuseColor);
    out_color += (difclr * 0.4);

    // 计算镜面色
    vec4 spcclr = (texture2D(gl3d_texture_specular, text_coord) + mtlSpecularColor);
    out_color += spcclr * 0.1;

    // 这行很神奇的让很多地方都有了金属质感？
    // out_color = min(vec4(1.0), out_color);
    // out_color += 0.4 * vec4(pow(max(0.0, spf-0.1), 7.0));
    // out_color = min(vec4(1.0), out_color);

    // for picking
    out_color = out_color * downParam;

    // clamp values
    out_color = clamp(out_color, 0.0, 1.0);
    out_color.w = alpha;
}
