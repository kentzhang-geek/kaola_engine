#version 150
precision highp float;

// light property
uniform vec4 mtlAmbientColor;
uniform vec4 mtlDiffuseColor;
uniform vec4 mtlSpecularColor;
uniform float mtlSpecularExponent;

in float df;
in float sf;
in float cam_pos_distance;
in vec2 text_coord;

// for texture
uniform sampler2D gl3d_texture_ambient;
uniform sampler2D gl3d_texture_diffuse;
uniform sampler2D gl3d_texture_specular;

uniform bool gl3d_t_ambient_enable;
uniform bool gl3d_t_diffuse_enable;
uniform bool gl3d_t_specular_enable;

// light
uniform float shininess;
uniform float param_x;
in vec3 eye_to_pos;
in vec3 l_normal;
in vec3 in_light;

// shadow
in vec4 vPos;
uniform mat4 s_mtx;
uniform sampler2DShadow gl3d_texture_shadow;
uniform vec3 shadow_center_input;
uniform mat4 transmtx;
uniform bool shadow_enable;
uniform vec2 shadow_map_size;
in float test;

// reflection
uniform float alpha;

// frag unproject
uniform mat4 unpvm;

// bounds
uniform vec2 canvas_size;

// out color
out vec4 out_color;
#define EPSILON 0.005

float get_lum(vec4 clr) {
	return 0.27 * clr.r + 0.67 * clr.g + 0.06 * clr.b;
}

void main() {
		vec4 sample[25];

		int i = 0;
		for (float y = -2.0 ; y <= 2.0 ; y++) {
				for (float x = -2.0 ; x <= 2.0 ; x++) {
						vec2 tmpcoord = text_coord;
						tmpcoord.x += x * EPSILON;
						tmpcoord.y += y * EPSILON;
						sample[i] = texture2D(gl3d_texture_diffuse, tmpcoord);
						sample[i] = sample[i] - 0.8;
						sample[i] = clamp(sample[i], vec4(0.0), vec4(1.0));
						i++;
				}
		}

		// Gaussian weighting:
		// 1  4  7  4 1
		// 4 16 26 16 4
		// 7 26 41 26 7 / 273 (i.e. divide by total of weightings)
		// 4 16 26 16 4
		// 1  4  7  4 1

		vec4 hdr_color = (
			(1.0  * (sample[0] + sample[4]  + sample[20] + sample[24])) +
			(4.0  * (sample[1] + sample[3]  + sample[5]  + sample[9] + sample[15] + sample[19] + sample[21] + sample[23])) +
			(7.0  * (sample[2] + sample[10] + sample[14] + sample[22])) +
			(16.0 * (sample[6] + sample[8]  + sample[16] + sample[18])) +
			(26.0 * (sample[7] + sample[11] + sample[13] + sample[17])) +
			(41.0 * sample[12])
			) / 273.0;

		out_color = texture2D(gl3d_texture_diffuse, text_coord);
		out_color += hdr_color;
		out_color = min(vec4(1.0), out_color);
}
