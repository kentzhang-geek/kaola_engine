#version 100
precision highp float;

// light property
uniform vec4 mtlAmbientColor;
uniform vec4 mtlDiffuseColor;
uniform vec4 mtlSpecularColor;
uniform float mtlSpecularExponent;

varying float df;
varying float sf;
varying float cam_pos_distance;
varying vec2 text_coord;

// for texture
uniform sampler2D gl3d_texture_ambient;
uniform sampler2D gl3d_texture_diffuse;
uniform sampler2D gl3d_texture_specular;

uniform bool gl3d_t_ambient_enable;
uniform bool gl3d_t_diffuse_enable;
uniform bool gl3d_t_specular_enable;

// light
uniform float shininess;
uniform float param_x;
varying vec3 eye_to_pos;
varying vec3 l_normal;
varying vec3 in_light;

// shadow
#define EPSILON 0.0002
varying vec4 vPos;
uniform mat4 s_mtx;
uniform sampler2D gl3d_texture_shadow;
varying float test;
uniform vec3 shadow_center_input;
uniform mat4 transmtx;
uniform bool shadow_enable;
uniform vec2 shadow_map_size;

// reflection
uniform float alpha;

// frag unproject
uniform mat4 unpvm;

// from rgb to hsi color space , hsi has cos(h),s,i
vec3 rgb2hsi(vec3 rgb) {
    if(length(rgb) == 0.0) {
        return vec3(0.0);
    }
    // 注意如果rgb为白色的话会发生除以0错误出现奇葩情况
    if ((rgb.r == rgb.g) && (rgb.g == rgb.b))
        return vec3(0.0, 0.0, (rgb.r + rgb.g + rgb.b)/3.0);
    vec3 hsi;
    
    // H
    if ((rgb.r >= rgb.g) && (rgb.r >= rgb.b)) { // R Max
        hsi.x = radians(60.0) * (rgb.g - rgb.b) / (rgb.r - min(rgb.g, rgb.b));
    }
    else if ((rgb.g >= rgb.r) && (rgb.g >= rgb.b)) { // G Max
        hsi.x = radians(60.0) * (rgb.b - rgb.r) / (rgb.g - min(rgb.r, rgb.b));
        hsi.x += radians(120.0);
    }
    else if ((rgb.b >= rgb.g) && (rgb.b >= rgb.r)) { // B Max
        hsi.x = radians(60.0) * (rgb.r - rgb.g) / (rgb.b - min(rgb.r, rgb.g));
        hsi.x += radians(240.0);
    } 
    if (hsi.x < 0.0) {
        hsi.x += radians(360.0);
    }

    // S
    float s = 1.0 - 3.0 / (rgb.r + rgb.g + rgb.b) * min(min(rgb.r, rgb.b), rgb.g);
    hsi.y = s;
    
    // I
    float i = (rgb.r + rgb.g + rgb.b)/3.0;
    hsi.z = i;
    
    return hsi;
}

vec3 hsi2rgb(vec3 hsi) {
    if(length(hsi) == 0.0) {
        return vec3(0.0);
    }
    vec3 rgb;
    // h < 120'
    if (hsi.x < radians(120.0)) {
        rgb.b = hsi.z * (1.0 - hsi.y);
        rgb.r = hsi.z * (1.0 + (hsi.y * cos(hsi.x) / cos(radians(60.0) - hsi.x)));
        rgb.g = 3.0 * hsi.z - rgb.r - rgb.b;
    }
    // h < 240'
    else if (hsi.x < radians(240.0)) {
        hsi.x -= radians(120.0);
        rgb.r = hsi.z * (1.0 - hsi.y);
        rgb.g = hsi.z * (1.0 + (hsi.y * cos(hsi.x) / cos(radians(60.0) - hsi.x)));
        rgb.b = 3.0 * hsi.z - rgb.r - rgb.g;
    }
    // h < 360'
    else {
        hsi.x -= radians(240.0);
        rgb.g = hsi.z * (1.0 - hsi.y);
        rgb.b = hsi.z * (1.0 + (hsi.y * cos(hsi.x) / cos(radians(60.0) - hsi.x)));
        rgb.r = 3.0 * hsi.z - rgb.g - rgb.b;
    }
    
    return rgb;
}

vec4 pack1 (float depth)
{
    const vec4 bitSh = vec4(256.0 * 256.0 * 256.0,
                            256.0 * 256.0,
                            256.0,
                            1.0);
    const vec4 bitMsk = vec4(0,
                             1.0 / 256.0,
                             1.0 / 256.0,
                             1.0 / 256.0);
    vec4 comp = fract(depth * bitSh);
    comp -= comp.xxyz * bitMsk;
    return comp;
}

vec4 pack3(float depth) {
    const vec4 bitSh = vec4(256.0,
                            256.0 * 256.0,
                            256.0 * 256.0 * 256.0,
                            256.0 * 256.0 * 256.0 * 256.0);
    vec4 ret = floor(depth * bitSh);
    ret = ret / 256.0;

    return ret;
}

float unpack(vec4 depth) {
    // const vec4 bitSh = vec4(1.0,
    //                         256.0,
    //                         256.0 * 256.0,
    //                         256.0 * 256.0 * 256.0);
    // vec4 tmp = depth/bitSh;
    // return tmp.x + tmp.y + tmp.z + tmp.w;
    // return depth.x + depth.y + depth.z + depth.w;
    // depth = depth / 4.0;
    return depth.x + depth.y + depth.z + depth.w;
}

void main() {
#if 1 // for test
    // vec4 vPos = unpvm * gl_FragCoord;
    vec4 vShadowCoord = s_mtx * vPos;
    vec4 s_pixel = vec4(0.0);
    float shadow_weaken = 1.0;;
    // 裁剪过远的阴影似乎是好了？
    float distance_shandow_center = length(shadow_center_input -
                                           vec3(transmtx * vPos));
    if (distance_shandow_center < 30.0) {
        vec2 offset = vec2(1.0/shadow_map_size.x, 1.0/shadow_map_size.y);
        vec4 shadowMapPosition = vShadowCoord/vShadowCoord.w;
        // trans -1~1 to 0~1
        shadowMapPosition = shadowMapPosition * 0.5 + 0.5;
        // shadowMapPosition.x = shadowMapPosition.x * 0.5 + 0.5;
        // shadowMapPosition.y = shadowMapPosition.y * 0.5 + 0.5;
        // shadowMapPosition.z = shadowMapPosition.z * 10.0;
        for (float y = -2.0 ; y <= 2.0 ; y++) {
            for (float x = -2.0 ; x <= 2.0 ; x++) {
                // get shadow depth pixel
                s_pixel = texture2D(gl3d_texture_shadow, 
                    vec2(shadowMapPosition.x + x*offset.x, 
                        shadowMapPosition.y + y*offset.y));
                float distanceFromLight = unpack(s_pixel);
                if ((s_pixel.z + EPSILON) > shadowMapPosition.z) {
                    shadow_weaken += 5.0 - abs(x) - abs(y);
                }
            }
        }
        shadow_weaken = (shadow_weaken/65.0);
    }
    
    // 计算自然色
    vec4 ambclr = gl3d_t_ambient_enable ? (texture2D(gl3d_texture_ambient, text_coord) + mtlAmbientColor) :
    mtlAmbientColor;
    gl_FragColor = ambclr;
    
    // 计算散射色
    vec4 difclr = gl3d_t_diffuse_enable ? shininess * (texture2D(gl3d_texture_diffuse, text_coord) + mtlDiffuseColor):
    mtlDiffuseColor * shininess;
    gl_FragColor += difclr * (0.2 + (0.8 * df)) - 0.1;
    
    // 计算镜面色
    vec3 out_light = reflect(in_light, l_normal);   // 获取出射光
    out_light = normalize(-out_light);
    float spf = max(0.0, dot(normalize(eye_to_pos), out_light));
    // vec4 spcclr = gl3d_t_specular_enable ? vec4(pow(spf/2.0, 3.0)) + normalize((texture2D(gl3d_texture_specular, text_coord) + mtlSpecularColor)) :
    // normalize(mtlSpecularColor) + vec4(pow(spf/2.0, 3.0));
    vec4 spcclr = gl3d_t_specular_enable ? normalize((texture2D(gl3d_texture_specular, text_coord) + mtlSpecularColor)) :
    normalize(mtlSpecularColor);
    vec3 spchsi = rgb2hsi(spcclr.xyz);
    spchsi.z += pow(spf/2.0, 3.0);
    spchsi.z = min(1.0, spchsi.z);
    spcclr = vec4(hsi2rgb(spchsi), spcclr.w);
    gl_FragColor += spcclr;
    
    // if (shadow_enable)
    //     if (test > 0.5)
    //         gl_FragColor = gl_FragColor * shadow_weaken;
    gl_FragColor = gl_FragColor * (500.0 - cam_pos_distance) / 500.0;
    
    // 这行很神奇的让很多地方都有了金属质感？
    // gl_FragColor = min(vec4(1.0), gl_FragColor);
    // gl_FragColor += 0.4 * vec4(pow(max(0.0, spf-0.1), 7.0));
    // gl_FragColor = min(vec4(1.0), gl_FragColor);
    
    // 尝试增强色度
    vec3 hsi = rgb2hsi(gl_FragColor.xyz);
    hsi.y *= 1.1;
    hsi.y = min(1.0, hsi.y);

    // 阴影与背光调整
    // float weak_factor = max(min(test, shadow_weaken), 0.0);
    if (shadow_enable)
        hsi.z *= max(0.5, 0.3 + 0.7 * shadow_weaken);
    gl_FragColor = vec4(hsi2rgb(hsi), gl_FragColor.w);

    // for picking
    gl_FragColor = gl_FragColor/param_x;

    // clamp values
    gl_FragColor = clamp(gl_FragColor, 0.0, 1.0);
    gl_FragColor.w = alpha;
    // + texture2D(gl3d_texture_diffuse, text_coord);
#endif

    // if (tmphsi.x < (2.0/3.0*M_PI))
    //      gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
    // else if (tmphsi.x < (4.0/3.0*M_PI))
    //      gl_FragColor = vec4(0.0, 1.0, 0.0, 1.0);
    // else
    //      gl_FragColor = vec4(0.0, 0.0, 1.0, 1.0);
    // gl_FragColor = vec4(hsi2rgb(tmphsi), 1.0);
    // texture2D(gl3d_texture_ambient, text_coord)
    // texture2D(gl3d_texture_diffuse, text_coord)
    // texture2D(gl3d_texture_specular, text_coord)
    // mtlAmbientColor
    // mtlDiffuseColor
    // mtlSpecularColor
    // gl_FragColor.w = 1.0;
    // gl_FragColor = vec4(0.0);
    // if (s_pixel.z > 0.0) {
    //     gl_FragColor = vec4(1.0);
    // }
}
